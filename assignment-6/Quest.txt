1. WAP to insert a new node at the beginning of a single linked list.

2. WAP to delete a node after a certain node of a single  linked list.

3. WAP to insert a new node before a certain node of a single linked list.

4.WAP to remove the duplicates in a sorted single linked list.

5. WAP to check whethere a single linked list is palindrome or not.

6.WAP to swap kth node from beginning with kth node from end in a single Linked List

7.Given a linked list, write a function to reverse every k nodes. (where k is
an input to the function). If a linked list is given as
12->23->45->89->15->67->28->98->NULL and k = 3
then output will be
45->23->12->67->15->89->98->28->NULL.

8.Given a singly linked list, rotate the linked list counter-clockwise by k
nodes. Where k is a given positive integer. For example, if the given
linked list is 10->20->30->40->50->60 and k is 4, the
list should be modified to 50->60->10->20->30->40. Assume 
that k is smaller than the count of nodes in linked list.

9. Reverse a single linked  list.

10.WAP to create a double linked list of n nodes and display the
linked list by using suitable user defined functions for create and
display operations.

11.Given a double linked list, rotate the linked list counter-clockwise by k
nodes. Where k is a given positive integer. For example, if the given
linked list is 10->20->30->40->50->60 and k is 4, the
list should be modified to 50->60->10->20->30->40. Assume
that k is smaller than the count of nodes in linked list.

12.WAP to reverse the sequence elements in a double linked list.

13.Write a menu driven program to perform the following operations in a double
linked list by using suitable user defined functions for each case.
a) Traverse the list forward,
b) Traverse the list backward,
c) Check if the list is empty
d) Insert a node at the certain position (at beginning/end/any position)
e) Delete a node at the certain position (at beginning/end/any position)
f) Delete a node for the given key, g) Count the total number of nodes,
h) Search for an element in the linked list
Verify & validate each function from main method

14.WAP to create a single circular double linked list of n nodes and display
the linked list by using suitable user defined functions for create and
display operations.

15.WAP to remove the duplicates in a sorted double linked list.

16.WAP to convert a given singly linked list to a circular list.

17.WAP to implement a doubly linked list by using singly linked.

18.WAP to print the middle of a double linked list.